name: DevOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  audit:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  build:
    needs: audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/swe40006-final:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Pull the latest Docker image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/swe40006-final:latest

            # Create the external network if it doesn't exist
            docker network ls | grep final || docker network create --driver overlay final

            # Main application stack
            # Update app stack with environment variables for telemetry
            cat > ~/app-stack.yaml << 'EOL'
            version: "3.8"
            
            services:
              web-app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/swe40006-final:latest
                ports:
                  - "80:3000"
                  - "8080:8080"  # Expose metrics endpoint
                restart: unless-stopped
                deploy:
                  replicas: 1
                  update_config:
                    parallelism: 1
                    delay: 10s
                  restart_policy:
                    condition: on-failure
                environment:
                  - NODE_ENV=production
                  - TEMPO_URL=http://tempo:4318/v1/traces
                  - LOKI_URL=http://loki:3100
                networks:
                  - final
            
            networks:
              final:
                external: true
                driver: overlay
              EOL

            # Monitoring stack
            cat > ~/monitoring-stack.yaml << 'EOL'
            version: "3.8"

            services:
              grafana:
                image: grafana/grafana:latest
                ports:
                  - "3000:3000"
                volumes:
                  - grafana-storage:/var/lib/grafana
                  - ./grafana-provisioning:/etc/grafana/provisioning
                environment:
                  - GF_SECURITY_ADMIN_PASSWORD=admin
                  - GF_USERS_ALLOW_SIGN_UP=false
                  - GF_INSTALL_PLUGINS=grafana-piechart-panel
                deploy:
                  replicas: 1
                networks:
                  - final
            
              prometheus:
                image: prom/prometheus:latest
                ports:
                  - "9090:9090"
                volumes:
                  - prometheus-data:/prometheus
                  - ./prometheus.yml:/etc/prometheus/prometheus.yml
                command:
                  - '--config.file=/etc/prometheus/prometheus.yml'
                  - '--storage.tsdb.path=/prometheus'
                  - '--web.console.libraries=/etc/prometheus/console_libraries'
                  - '--web.console.templates=/etc/prometheus/consoles'
                deploy:
                  replicas: 1
                networks:
                  - final
            
              loki:
                image: grafana/loki:latest
                ports:
                  - "3100:3100"
                command: -config.file=/etc/loki/local-config.yaml
                volumes:
                  - loki-data:/loki
                deploy:
                  replicas: 1
                networks:
                  - final
            
              tempo:
                image: grafana/tempo:latest
                ports:
                  - "3200:3200"
                  - "4317:4317"  # OTLP gRPC
                  - "4318:4318"  # OTLP HTTP
                command: -config.file=/etc/tempo/tempo-config.yaml
                volumes:
                  - tempo-data:/tmp/tempo
                  - ./tempo-config.yaml:/etc/tempo/tempo-config.yaml
                deploy:
                  replicas: 1
                networks:
                  - final
            
            volumes:
              grafana-storage:
              prometheus-data:
              loki-data:
              tempo-data:
            
            networks:
              final:
                external: true
                driver: overlay
              EOL

            # Update Prometheus config
            cat > ~/prometheus.yml << 'EOL'
            global:
              scrape_interval: 15s
            
            scrape_configs:
              - job_name: 'prometheus'
                static_configs:
                  - targets: ['localhost:9090']
            
              - job_name: 'node-app'
                static_configs:
                  - targets: ['web-app:8080']  # Metrics endpoint
              EOL
            
            # Create Tempo configuration
            cat > ~/tempo-config.yaml << 'EOL'
            server:
              http_listen_port: 3200
            
            distributor:
              receivers:
                otlp:
                  protocols:
                    http:
                    grpc:
            
            storage:
              trace:
                backend: local
                local:
                  path: /tmp/tempo
              EOL
              
              # Create Grafana datasource provisioning
              mkdir -p ~/grafana-provisioning/datasources
              cat > ~/grafana-provisioning/datasources/datasources.yaml << 'EOL'
            apiVersion: 1
            
            datasources:
              - name: Prometheus
                type: prometheus
                access: proxy
                url: http://prometheus:9090
                isDefault: true
            
              - name: Loki
                type: loki
                access: proxy
                url: http://loki:3100
            
              - name: Tempo
                type: tempo
                access: proxy
                url: http://tempo:3200
                jsonData:
                  httpMethod: GET
                  serviceMap:
                    datasourceUid: prometheus
              EOL

            # Deploy or update both stacks
            docker stack deploy -c ~/app-stack.yaml app-stack --with-registry-auth
            docker stack deploy -c ~/monitoring-stack.yaml monitoring-stack --with-registry-auth

            # Clean up unused images
            docker image prune -f